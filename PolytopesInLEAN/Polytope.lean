
import PolytopesInLEAN.Aux_General
import PolytopesInLEAN.Aux_Convex

noncomputable section

/- We assume all propositions are decidable to properly work with Finset:
  * allows to freely convert between Finset and Set.Finite.
  * allows us to recognize {P, Q} has a Finset, even if P and Q
    have no decidable equivalence natively.
-/
attribute [local instance] Classical.propDecidable

variable {ùïú : Type*} [LinearOrderedField ùïú]
variable {V : Type*} [VectorSpace ùïú V]
variable {A : Type*} [AffineSpace V A]

-- Polytopes --

def Set.is_polytope (S : Set A)
  := ‚àÉ set : Set A,
      set.Finite ‚àß
      S = convex_hull set

-- abbrev Polytope (A : Type*) [AffineSpace V A] -- = V-Polytopes
--   := { S : Set A // is_polytope S }

structure Polytope (A : Type*) [AffineSpace V A] where
  set : Set A
  is : set.is_polytope
instance : Coe (Polytope A) (Set A) := ‚ü®Polytope.set‚ü©

theorem Polytope.is_convex (P : Polytope A) : P.1.is_convex := by
  let ‚ü® S, _, _, hS ‚ü© := P
  dsimp; rw [hS]
  apply convex_hull.is_convex

/-- A definition of 'being bounded' in affine spaces that does not require
  a topology. -/
def poly_bounded (S : Set A) := ‚àÉP : Polytope A, S ‚äÜ P

lemma Polytope.is_bounded (P : Polytope A) : poly_bounded P.1
  := ‚ü® P, subset_refl P.set ‚ü©

def Polytope.vertices' (P : Polytope A) : Set A :=
  ‚ãÇ‚ÇÄ { V : Set A | P = convex_hull V }

theorem Polytope.vertices'_is_finite (P : Polytope A) : P.vertices'.Finite := by
  let ‚ü® S, V, h_fin, h_S ‚ü© := P
  apply Set.Finite.subset h_fin
  apply Set.sInter_subset_of_mem
  exact h_S

def Polytope.vertices (P : Polytope A) : Finset A :=
  P.vertices'_is_finite.toFinset

theorem empty_is_polytope (A : Type*) [AffineSpace V A]
  : Set.is_polytope (‚àÖ : Set A)
  := ‚ü® ‚àÖ, Set.finite_empty, eq_comm.mp (convex_hull.of_empty_is_empty A) ‚ü©

def Polytope.empty (A : Type*) [AffineSpace V A] : Polytope A
  := ‚ü® ‚àÖ, empty_is_polytope A ‚ü©

theorem point_is_polytope (x : A) : Set.is_polytope {x} := by
  use {x}; simp
  exact (convex_hull.of_point_is_point x).symm

def Polytope.from_point (x : A) : Polytope A := ‚ü® {x}, point_is_polytope _ ‚ü©

def Polytope.affine_span (P : Polytope A) := affineSpan ùïú P.1

def Polytope.full_dimension (P : Polytope A) := P.affine_span = ‚ä§

/-- The affine span of a polytope is of finite dimension. -/
theorem Polytope.finite_dim' (P : Polytope A)
    : FiniteDimensional ùïú (P.affine_span.direction) := by
sorry

/-- The ambient space of a full-dimensional polytope is of finite dimension. -/
theorem Polytope.finite_dim (P : Polytope A) (h_fd : P.full_dimension)
    : FiniteDimensional ùïú V := by
  let ‚ü® S, vert, h_fin, h_set ‚ü© := P
  unfold Polytope.full_dimension at h_fd
  unfold Polytope.affine_span at h_fd
  simp at h_fd
  rw [h_set, ‚Üêconvex_hull.same_affine_span] at h_fd
  --exact finiteDimensional_direction_affineSpan_of_finite h_fd
  sorry

-- theorem ambient_is_polytope_iff_dim_zero (A : Type*) [AffineSpace V A]
--   : (Set.univ : Set A).is_polytope ‚Üî (Module.rank A) = 0 := sorry

/-- Every subset of a 0-dimensional affine space is a polytope. -/
theorem AffineSpace.subset_of_dim_zero_is_polytope [FiniteDimensional V] (h_dim : AffineSpace.dim A = 0)
    : ‚àÄ S : Set A, S.is_polytope := by
  intro S
  apply AffineSpace.dim_zero_is_subsingleton at h_dim
  cases Set.Subsingleton.eq_empty_or_singleton S.subsingleton_of_subsingleton
  case inl hl => -- S = ‚àÖ
    rw [hl]
    exact empty_is_polytope A
  case inr hr => -- S = {x}
    let ‚ü® x, hx ‚ü© := hr
    rw [hx]
    exact point_is_polytope x

theorem Polytope.is_convex_hull_of_vertices (P : Polytope A)
: P.1 = convex_hull P.vertices := by
  let ‚ü® S, V, h_fin, h_S ‚ü© := P
  sorry
